buildscript {
  repositories {
    mavenCentral()
    gradlePluginPortal()
    google()
  }
}
// We keep the android application plugin only:
plugins {
  id("com.android.application")
}

android {
  namespace = "io.github.minemon"
  compileSdk = 34

  // Standard LibGDX source set logic
  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs 'src/main/java'
      aidl.srcDirs 'src/main/java'
      renderscript.srcDirs 'src/main/java'
      res.srcDirs 'res'
      assets.srcDirs '../assets'
      jniLibs.srcDirs 'libs'
    }
  }

  // Try to remove massive pickFirst rules for Spring/Hibernate:
  packagingOptions {
    resources {
      excludes += [
        "META-INF/robovm/ios/robovm.xml",
        "META-INF/DEPENDENCIES.txt",
        "META-INF/DEPENDENCIES",
        "META-INF/dependencies.txt",
        "**/*.gwt.xml"
      ]
      // If you still have conflicts from LWJGL or other libs:
      pickFirsts += [
        "META-INF/LICENSE.txt",
        "META-INF/LICENSE",
        "META-INF/NOTICE",
        "META-INF/notice.txt",
        "META-INF/native-image/org.lwjgl/lwjgl/jni-config.json"
      ]
      pickFirst "**/*.properties"
      // If you truly need to pickFirst everything else, you can do:
      // pickFirst "**/*.properties"
      // But ideally keep these minimal
    }
  }

  defaultConfig {
    applicationId = "io.github.minemon"
    minSdkVersion(26)
    targetSdkVersion(34)
    versionCode = 1
    versionName = "1.0"
    multiDexEnabled = true
  }

  compileOptions {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    coreLibraryDesugaringEnabled = true
  }

  buildTypes {
    release {
      minifyEnabled = true
      proguardFiles(
        getDefaultProguardFile("proguard-android.txt"),
        "proguard-rules.pro"
      )
    }
  }
}

repositories {
  google()
  mavenCentral()
}

configurations {
  natives
}

dependencies {
  // LibGDX Android runtime
  implementation("com.badlogicgames.gdx:gdx-backend-android:$gdxVersion")

  // If you have a separate project for LWJGL3 (desktop),
  // you can still reference it here if it doesn't bring server libs
  implementation(project(":lwjgl3"))

  // The shared core code
  implementation(project(":core"))

  // For Java 8+ API backports
  coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.4")

  // Native dependencies for LibGDX (ARM, x86, etc.)
  natives("com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a")
  natives("com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a")
  natives("com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86")
  natives("com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64")
}

// Extract native .so files
tasks.register("copyAndroidNatives") {
  doFirst {
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.copy().files.each { jar ->
      def outputDir = null
      if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
      if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
      if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
      if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
      if (outputDir != null) {
        copy {
          from zipTree(jar)
          into outputDir
          include "*.so"
        }
      }
    }
  }
}

tasks.matching {
  it.name.contains("merge") && it.name.contains("JniLibFolders")
}.configureEach { packageTask ->
  packageTask.dependsOn("copyAndroidNatives")
}

// Just an example 'run' task to start the activity via ADB
tasks.register("run", Exec) {
  def path
  def localProperties = project.file("../local.properties")
  if (localProperties.exists()) {
    Properties properties = new Properties()
    localProperties.withInputStream { instr ->
      properties.load(instr)
    }
    def sdkDir = properties.getProperty("sdk.dir")
    path = sdkDir ?: "$System.env.ANDROID_SDK_ROOT"
  } else {
    path = "$System.env.ANDROID_SDK_ROOT"
  }
  def adb = "${path}/platform-tools/adb"
  commandLine(adb, "shell", "am", "start",
    "-n", "io.github.minemon/io.github.minemon.android.AndroidLauncher")
}

// If you use Eclipse
eclipse.project.name = appName + "-android"
