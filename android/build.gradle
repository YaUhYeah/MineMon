plugins {
  id 'com.android.application'
  id 'io.freefair.lombok' version '8.3'
}

def gdxVersion = "1.13.0"
def springVersion = "3.1.4"

configurations {
  natives

  // Exclude H2 database
  all*.exclude group: 'com.h2database'

  // Add other exclusions if needed
  all*.exclude module: 'spring-boot-starter-jdbc'
}

android {
  namespace "io.github.minemon"
  compileSdk 34

  buildFeatures {
    buildConfig = true
  }

  defaultConfig {
    applicationId "io.github.minemon"
    minSdk 26
    targetSdk 34
    versionCode 1
    versionName "1.0"

    multiDexEnabled true

    ndk {
      abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
    }
  }

  sourceSets {
    main {
      manifest.srcFile 'AndroidManifest.xml'
      java.srcDirs = ['src']
      aidl.srcDirs = ['src']
      renderscript.srcDirs = ['src']
      res.srcDirs = ['res']
      assets.srcDirs = ['assets']
      jniLibs.srcDirs = ['libs']
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
    encoding = 'UTF-8'
  }
  packagingOptions {
    jniLibs {
      pickFirsts += ['META-INF/proguard/*']
    }
    resources {
      excludes += ['META-INF/spring.factories', 'META-INF/spring.handlers', 'META-INF/spring.schemas', 'META-INF/spring.tooling', 'META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/notice.txt', 'META-INF/ASL2.0', 'META-INF/**/module-info.class', 'META-INF/io.netty.versions.properties']
      pickFirsts += ['META-INF/INDEX.LIST', 'META-INF/MANIFEST.MF', 'META-INF/proguard/*', 'notice.txt', 'META-INF/notice.txt', 'META-INF/LICENSE.md', '**/*.md', '**/*.json', '**/*.txt', '**/*.sha1', '**/*.properties', 'META-INF/spring/aot.factories']
    }
  }


  lint {
    abortOnError false
  }
}

dependencies {
  implementation project(':core')

  // LibGDX
  implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
  implementation "com.badlogicgames.gdx:gdx:$gdxVersion"

  // LibGDX natives
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
  
  // FreeType
  implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
  natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"

  // Android Support
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'androidx.multidex:multidex:2.0.1'

  // Spring (minimal set)
  implementation("org.springframework:spring-core:$springVersion") {
    exclude group: 'org.springframework', module: 'spring-jcl'
  }
  implementation("org.springframework:spring-context:$springVersion") {
    exclude group: 'org.springframework', module: 'spring-jcl'
  }

  // Logging
  implementation 'com.github.tony19:logback-android:3.0.0'
  implementation 'org.slf4j:slf4j-api:2.0.9'
  implementation 'org.slf4j:jcl-over-slf4j:2.0.9'  // Bridge for Spring logging

  // Lombok
  compileOnly "org.projectlombok:lombok:1.18.30"
  annotationProcessor "org.projectlombok:lombok:1.18.30"
}

// Native libraries task
task copyAndroidNatives {
  doLast {
    file("libs/armeabi-v7a/").mkdirs()
    file("libs/arm64-v8a/").mkdirs()
    file("libs/x86_64/").mkdirs()
    file("libs/x86/").mkdirs()

    configurations.natives.files.each { jar ->
      def outputDir = null
      if(jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
      if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
      if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
      if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
      if(outputDir != null) {
        copy {
          from zipTree(jar)
          into outputDir
          include "*.so"
        }
      }
    }
  }
}

// Add these task dependencies
tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { task ->
  task.dependsOn 'copyAndroidNatives'
}

tasks.matching { it.name.contains("package") && it.name.contains("Debug") }.configureEach { task ->
  task.dependsOn 'copyAndroidNatives'
}
